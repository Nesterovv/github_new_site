{"version":3,"sources":["components/Common/Common.js","App.js","serviceWorker.js","index.js","components/Common/styles.module.css"],"names":["Common","useState","query","setQuery","movies","setMovies","modalIsOpen","setmodalIsOpen","getData","e","a","preventDefault","url","fetch","res","json","data","console","error","className","styles","container","header","Form","inline","onSubmit","FormControl","type","placeholder","search","name","value","onChange","target","Button","variant","block_with_filter_second","sortby","length","filter","movie","poster_path","map","Card","cardcontainer","key","id","onClick","Img","src","alt","Body","Title","title","Text","release_date","genres","isOpen","shouldCloseOnOverlayClick","style","overlay","backgroundColor","ListGroup","Item","overview","budget","vote_average","size","block","Modal","setAppElement","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message","module","exports"],"mappings":"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","file":"static/js/main.c49bd9bf.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport styles from './styles.module.css';\r\nimport Modal from 'react-modal'\r\nimport Button from 'react-bootstrap/Button';\r\nimport Form from 'react-bootstrap/Form'\r\nimport FormControl from 'react-bootstrap/FormControl'\r\nimport Card from 'react-bootstrap/Card';\r\nimport ListGroup from 'react-bootstrap/ListGroup'\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nModal.setAppElement('#root')\r\n\r\nexport function Common() {\r\n  const [query, setQuery] = useState('');\r\n  const [movies, setMovies] = useState([]);\r\n  const [modalIsOpen, setmodalIsOpen] = useState(false);\r\n  const getData = async (e) => {\r\n    e.preventDefault();\r\n\r\n    const url = `https://reactjs-cdp.herokuapp.com/movies?search=${query}&searchBy=title`;\r\n  \r\n\r\n  try {\r\n    const res =  await fetch(url);\r\n    const data = await res.json();\r\n    setMovies (data.data);\r\n  }catch(err){\r\n    console.error(err);\r\n  }\r\n}\r\n\r\n       \r\n    return (\r\n        <div>\r\n        <div className={styles.container}>\r\n        <p className={styles.header}>FIND YOUR MOVIE</p>\r\n        <Form inline onSubmit={getData}>\r\n        <FormControl type=\"text\" placeholder=\"Seacrh film ...\" \r\n        className={styles.search} name=\"query\" value={query} onChange={(e) => setQuery(e.target.value)} />\r\n        <Button type='submit' variant=\"outline-success\">Search</Button>\r\n        {/*<input type=\"text\" className={styles.search} placeholder='Seacrh film ...'\r\n         name=\"query\" value={query} onChange={(e) => setQuery(e.target.value)} />\r\n    <Button type='submit'>Search</Button>*/}\r\n        </Form>\r\n        {/*<div className={styles.block_with_filter}>\r\n        <p className={styles.p_elem}>SEARH BY</p>\r\n        <button className={styles.button_searchby}>TITLE</button>\r\n        <button className={styles.button_searchby}>GENRE</button>\r\n        </div>*/}\r\n        </div>\r\n        <div className={styles.block_with_filter_second}>\r\n    <p className={styles.sortby}>{movies.length} movies found</p>\r\n        {/*<div className={styles.sortby}>\r\n        <p className={styles.inline}>Sort by</p>\r\n        <a className={styles.links} rel='stylesheet' href=\"#\"> release date </a>\r\n        <p></p>\r\n        <a className={styles.links} rel='stylesheet' href=\"#\"> rating </a>\r\n      </div>*/}\r\n        </div>\r\n        \r\n        {movies.filter(movie => movie.poster_path).map(movie => {\r\n          return <Card className={styles.cardcontainer} key={movie.id} onClick={() => setmodalIsOpen(true)}>\r\n          <Card.Img variant=\"top\" src={movie.poster_path} alt=\"Movie\" />\r\n          <Card.Body>\r\n            <Card.Title>{movie.title}</Card.Title>\r\n            <Card.Text>\r\n            {movie.release_date} <br/>\r\n            {movie.genres}\r\n            </Card.Text>\r\n          </Card.Body>\r\n          </Card>\r\n        })}\r\n        <Modal isOpen={modalIsOpen} shouldCloseOnOverlayClick={false} style={{overlay:{backgroundColor:'grey'}}}>\r\n            <h3>Films description</h3>\r\n            <div>\r\n            {movies.map(movie =>{\r\n          return <ListGroup key={movie.id} ><ListGroup.Item><div>Film Name:{movie.title}</div>\r\n          <div>Genre:{movie.genres}</div>\r\n          <div>Overview:{movie.overview}</div>\r\n          <div>Budget:{movie.budget}</div>\r\n          <div>Rating:{movie.vote_average}</div>\r\n          </ListGroup.Item>\r\n          </ListGroup>\r\n          })}\r\n          </div>\r\n            <Button variant=\"primary\" size=\"lg\" block onClick={() => setmodalIsOpen(false)}>Close</Button>\r\n            </Modal>\r\n        </div>\r\n        \r\n    );\r\n      \r\n          }\r\n\r\n\r\n","import React from 'react';\n//import { Filmitem } from './components/Filmitem';\nimport { Common } from './components/Common';\n\nexport function App() {\n  return (\n    <div>\n      <Common />\n    </div>\n  );\n}\nexport default (App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n  <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"styles_container__2u83e\",\"header\":\"styles_header__3p654\",\"search\":\"styles_search__3PT7-\",\"button_search\":\"styles_button_search__3shMf\",\"block_with_filter\":\"styles_block_with_filter__udY0R\",\"p_elem\":\"styles_p_elem__2zrNp\",\"button_searchby\":\"styles_button_searchby__2TNAr\",\"block_with_filter_second\":\"styles_block_with_filter_second__TQkjb\",\"sortby\":\"styles_sortby__2QrAS\",\"sortbylinks\":\"styles_sortbylinks__3uqIT\",\"links\":\"styles_links__2vUH3\",\"film__ites\":\"styles_film__ites__XyLEE\",\"film__img\":\"styles_film__img__hCN6G\",\"film_title\":\"styles_film_title__2h5O8\",\"span_elem\":\"styles_span_elem__WioU-\",\"flex\":\"styles_flex__3qaig\",\"divstyle\":\"styles_divstyle__cloto\",\"cardcontainer\":\"styles_cardcontainer__3cRgl\",\"description\":\"styles_description__2VhWB\"};"],"sourceRoot":""}